@page "/NVIDIA"

@using ColorControl.Shared.Contracts
@using ColorControl.Shared.Contracts.NVIDIA
@using ColorControl.Shared.Services;
@using ColorControl.UI.Components.Pages.Generic
@using ColorControl.Shared.Common;
@using ColorControl.UI.Generics
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@rendermode InteractiveServer

@inject RpcUiClientService _rpcClientService
@inject ProtectedLocalStorage _localStorage

<PageTitle>NVIDIA controller</PageTitle>

<NvidiaSettings />
<NvidiaDithering Visible="DitheringVisible" />
<NvidiaDriverSettings Preset="CurrentDriverSettingsPreset" />

<div class="d-flex align-items-center">
	<h1>NVIDIA controller</h1>
	<div class="d-flex ms-auto">
		<div class="btn-group">
			<button type="button" class="btn btn-sm btn-primary dropdown-toggle me-2" data-bs-toggle="dropdown" aria-expanded="false">
				Tools
			</button>
			<ul class="dropdown-menu">
				<li><a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#ditheringModal" @onclick="() => DitheringVisible = true">Test dithering</a></li>
				<li><a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#driverSettingsModal" @onclick="() => CurrentDriverSettingsPreset = null">Driver settings</a></li>
			</ul>
		</div>
		<button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#settingsModal">
			Settings
		</button>
	</div>
</div>

<h2>Displays</h2>

<NvidiaPreset PresetParam="CurrentPreset" AfterApply="AfterPresetApplied" SetDriverSettingsPreset="SetDriverSettingsPreset" />
<ConfirmModal Title="Delete preset" Message="Are you sure you want to delete the preset?" OnConfirm="PresetOnDeleteConfirmed" />

@if (DisplayPresets == null)
{
	<div>Loading...</div>
}
else
{
	<div class="row mb-3">
		@if (!DisplayPresets.Any())
		{
			<span>No displays found</span>
		}
		@foreach (var preset in DisplayPresets)
		{
			<div class="col-lg-6 mb-3">
				<div class="card h-100">
					<div class="card-header d-flex align-items-baseline">
						<span>
							@preset.displayName
							@if (preset.DisplayConfig.IsPrimary == true)
							{
								<span class="ms-2 badge text-bg-primary" title="Primary display">Primary</span>
							}
						</span>
						<div class="d-flex ms-auto">
							<button type="button" class="btn btn-sm btn-primary ms-2" data-bs-toggle="modal" data-bs-target="#presetModal" @onclick="() => DisplayPresetOnClick(preset)">
								Settings
							</button>
						</div>
					</div>
					<div class="card-body">
						<small class="text-body">@preset.DisplayConfig.Resolution.ToString() @@ @preset.DisplayConfig.RefreshRate.ToString()Hz</small>
						<small class="text-muted">@preset.colorData</small>
					</div>
				</div>
			</div>
		}
	</div>
}

@if (Presets == null)
{
	<div>Loading...</div>
}
else
{
	<div class="mb-2 d-flex align-items-center">
		<h2>Presets</h2>
		<div class="d-flex ms-auto">
			<select class="form-select me-2" id="presetOrder" @bind="PresetOrder" @bind:after="PresetOrderChanged">
				@foreach (var order in Enum.GetValues<PresetOrder>())
				{
					<option value="@order">Order by: @order.GetDescription()</option>
				}
			</select>
			<button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#presetModal" @onclick="() => AddPresetOnClick()">
				Add
			</button>
		</div>
	</div>
	<div class="row mb-3">
		<div class="col">
			<div class="list-group">
				@foreach (var preset in Presets)
				{
					<a class="list-group-item list-group-item-action" @onclick="() => PresetOnClick(preset)" @onclick:preventDefault @onclick:stopPropagation>
						<div class="d-flex align-items-start justify-content-between">
							<div>
								<h5 class="mb-1">
									@preset.name <small class="text-muted">@(preset.primaryDisplay ? "Primary display" : preset.displayName)</small>
									@if (preset.ShowInQuickAccess)
									{
										<span class="ms-2 badge text-bg-warning" title="Show in Quick Access">QA</span>
									}
								</h5>
							</div>
							<span>
								<button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#confirmModal" @onclick="() => PresetOnDeleteClick(preset)" @onclick:preventDefault @onclick:stopPropagation>Delete</button>
								<button class="btn btn-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#presetModal" @onclick="() => PresetOnCloneClick(preset)" @onclick:preventDefault @onclick:stopPropagation>Clone</button>
								<button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#presetModal" @onclick="() => PresetOnEditClick(preset)" @onclick:preventDefault @onclick:stopPropagation>Edit</button>
							</span>
						</div>
						<p class="mb-1">
							@preset.DisplayConfig.Resolution.ToString() @@ @preset.DisplayConfig.RefreshRate.ToString()Hz
							@(preset.applyColorData ? " " + preset.colorData : "")
							@if (preset.ApplyColorEnhancements)
							{
								<span>, @preset.ColorEnhancementSettings</span>
							}
							@if (preset.applyHDR)
							{
								<span>, HDR: @preset.GetHdrDescription()</span>
							}
							@if (preset.applyDriverSettings)
							{
								<span>, @preset.driverSettings.Count changed driver settings</span>
							}
							@if (preset.ApplyNovideoSettings)
							{
								<span>, @preset.NovideoSettings</span>
							}
						</p>
						<small class="text-muted">@preset.shortcut</small>
					</a>
				}
			</div>
		</div>
	</div>
}

@code {
	private List<NvPreset>? Presets;
	private List<NvPreset>? DisplayPresets;

	private NvPreset? CurrentPreset;
	private NvPreset? CurrentDriverSettingsPreset;
	private bool DitheringVisible;

	private PresetOrder PresetOrder;

	protected override async Task OnInitializedAsync()
	{
		await RefreshPresets();
		DisplayPresets = await _rpcClientService.CallAsync<List<NvPreset>>("NvService", "GetDisplayPresets");
	}

	protected override async Task OnAfterRenderAsync(bool firstTime)
	{
		if (firstTime)
		{
			PresetOrder = await _localStorage.TryGet<PresetOrder>("NvidiaPresetOrder");
			Presets = Presets?.OrderPresetsBy(PresetOrder);

			StateHasChanged();
		}
	}

	private async Task PresetOnClick(NvPreset preset)
	{
		await _rpcClientService.CallAsync<bool>("NvService", "ApplyPresetWithId", preset.id);
	}

	private async Task PresetOnEditClick(NvPreset preset)
	{
		CurrentPreset = preset;
	}

	private async Task PresetOnCloneClick(NvPreset preset)
	{
		CurrentPreset = new NvPreset(preset);
		CurrentPreset.name = preset.name;
		CurrentPreset.SetCloneValues();
	}

	private async Task PresetOnDeleteClick(NvPreset preset)
	{
		CurrentPreset = preset;
	}

	private async Task PresetOnDeleteConfirmed()
	{
		if (CurrentPreset == null)
		{
			return;
		}

		await _rpcClientService.CallAsync<bool>("NvService", "DeletePreset", CurrentPreset.id);
		await RefreshPresets();
		StateHasChanged();
	}

	private async Task DisplayPresetOnClick(NvPreset preset)
	{
		CurrentPreset = preset;
	}

	private async Task AddPresetOnClick()
	{
		CurrentPreset = new NvPreset();
	}

	private async Task AfterPresetApplied(NvPreset preset)
	{
		if (preset.IsDisplayPreset)
		{
			DisplayPresets = await _rpcClientService.CallAsync<List<NvPreset>>("NvService", "GetDisplayPresets");
		}
		else
		{
			await RefreshPresets();
		}
		StateHasChanged();
	}

	private async Task SetDriverSettingsPreset(NvPreset preset)
	{
		CurrentDriverSettingsPreset = preset;
		StateHasChanged();
	}

	private async Task PresetOrderChanged()
	{
		await _localStorage.SetAsync("NvidiaPresetOrder", PresetOrder);
		await RefreshPresets();
	}

	private async Task RefreshPresets()
	{
		Presets = await _rpcClientService.CallAsync<List<NvPreset>>("NvService", "GetPresets");

		Presets = Presets?.OrderPresetsBy(PresetOrder);
	}
}
